from math import sin, cos, log, ceil
import numpy
import matplotlib.pyplot as plt
%matplotlib inline
from matplotlib import rcParams

# model parameters:
g = 9.8      # gravity in m s^{-2}
v_t = 4.9   # trim velocity in m s^{-1}   
C_D = 1.  # drag coefficient --- or D/L if C_L=1
C_L = 5.    # for convenience, use C_L = 1

### set initial conditions ###
x0 = 0.0     # horizotal position is arbitrary
y0 = 1.7     # initial altitude --> height of person throwing airplane (m)

### what we want to find
# best combination of launch velocity and laucnh angle to give greatest
# distance. To do so, we'll create two arrays, one of launch angles from 0-90
# degrees, the other, velocities in the range of normal human throwing
# velocities. From there, we'll calculate the trajectory using the phugoid
# model for every combination of velocities and angles to determine the best
# combination. What we'll need: two nested for loops, one for the angles, the
# other for velocities, and a "keeper" array to carry the best combination
# across iterations.

### create angle and velocity arrays
thetas = numpy.arange(-1.57,1.58,0.01)    # initial angles in radians
velocities = numpy.arange(0.1,10.1,0.1)   # initial velocities in m/s

def f(u):
    """Returns the right-hand side of the phugoid system of equations.
    
    Parameters
    ----------
    u : array of float
        array containing the solution at time n.
        
    Returns
    -------
    dudt : array of float
        array containing the RHS given u.
    """
    
    v = u[0]
    theta = u[1]
    x = u[2]
    y = u[3]
    return numpy.array([-g*sin(theta) - C_D/C_L*g/v_t**2*v**2,
                      -g*cos(theta)/v + g/v_t**2*v,
                      v*cos(theta),
                      v*sin(theta)])

def euler_step(u, f, dt):
    """Returns the solution at the next time-step using Euler's method.
    
    Parameters
    ----------
    u : array of float
        solution at the previous time-step.
    f : function
        function to compute the right hand-side of the system of equation.
    dt : float
        time-increment.
    
    Returns
    -------
    u_n_plus_1 : array of float
        approximate solution at the next time step.
    """
    
    return u + dt * f(u)

# initialize the array containing the solution for each time-step
u = numpy.empty((N, 4))

T = 100.0                          # final time
dt = 0.1                           # time increment
N = int(T/dt) + 1                  # number of time-steps
t = numpy.linspace(0.0, T, N)      # time discretization

# nested for loops to test each combination of angle and velocity
# while loop terminates when paper airplane hits the ground
# (if it does in time T!!)

u_longest_dist = numpy.empty(4)
y = 1

for ii in range(size(velocities)):
    for jj in range(size(thetas)):
        vel_temp = velocities[ii]
        theta_temp = thetas[jj]
        u[0] = numpy.array([vel_temp, theta_temp, x0, y0])
        while y > 0:
            for n in range(N-1):
                u[n+1] = euler_step(u[n],f,dt)
                y = u[n,3]
        if u[-1,2] > u_longest_dist[-1,2]:
            u_longest_dist = u
            
