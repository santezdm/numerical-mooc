from math import sin, cos, log, ceil
import numpy
import matplotlib.pyplot as plt
%matplotlib inline
from matplotlib import rcParams
rcParams['font.family'] = 'serif'
rcParams['font.size'] = 16

# model parameters:
g = 9.8      # gravity in m s^{-2}
m_s = 50.0   # weight of rocket shell in kg   
C_D = 0.15   # drag coefficient
rho = 1.091  # average air density in kg m^{-3}
r = 0.5      # radius of maximum cross section of rocket in m
v_e = 325.0  # exhaust speed m s{-1}
A = pi*r**2  # maximum cross sectional area of rocket in m^{2}

### set initial conditions (t = 0 s) ###
m_p0 = 100.0 # mass of propellant in kg
h_0 = 0.1    # height in m
v_0 = 0.1    # velocity in m s{-1}

def f(u,t):
    """Returns the right-hand side of the phugoid system of equations.
    
    Parameters
    ----------
    u : array of float
        array containing the solution at time n.
        
    Returns
    -------
    dudt : array of float
        array containing the RHS given u.
    """
    if t > 5:
        m_pDot = 0.0
    elif t < 5 or t == 5:
        m_pDot = 20.0
    
    m_p = m_p0 - m_pDot*t
    
    h = u[0]
    v = u[1]
    return numpy.array([v, 1/(m_s+m_p)*(-(m_s+m_p)*g+m_pDot*v_e-0.5*rho*v*abs(v)*A*C_D)])

def euler_step(u, f, dt, t):
    """Returns the solution at the next time-step using Euler's method.
    
    Parameters
    ----------
    u : array of float
        solution at the previous time-step.
    f : function
        function to compute the right hand-side of the system of equation.
    dt : float
        time-increment.
    
    Returns
    -------
    u_n_plus_1 : array of float
        approximate solution at the next time step.
    """
    
    return u + dt * f(u,t)

T = 100.0                          # Max time allowed
dt = 0.1                           # time increment
N = int(T/dt) + 1                  # number of time-steps
t = numpy.linspace(0.0, T, N)      # time discretization

# initialize the array containing the solution for each time-step
u = numpy.empty((N, 2))
u[0] = numpy.array([h_0,v_0])# fill 1st element with initial values

# time loop - Euler method
for n in range(N-1):
    
    u[n+1] = euler_step(u[n], f, dt, t[n])
    
    if u[n,0] < 0:
        break

# get the rocket's position and velocity with respect to time
h = u[:,0]
v = u[:,1]

# visualization of the path
plt.figure(figsize=(8,6))
plt.grid(True)
plt.xlabel(r't', fontsize=18)
plt.ylabel(r'h', fontsize=18)
plt.title('Height of Rocket Over Time', fontsize=18)
plt.plot(t,h, 'k-', lw=2);

# visualization of the velocity
plt.figure(figsize=(8,6))
plt.grid(True)
plt.xlabel(r't', fontsize=18)
plt.ylabel(r'v', fontsize=18)
plt.title('Velocity of Rocket Over Time', fontsize=18)
plt.plot(t,v, 'k-', lw=2);
