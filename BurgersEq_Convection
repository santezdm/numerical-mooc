%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
import sympy
from matplotlib import animation
from JSAnimation.IPython_display import display_animation

nx = 81
nt = 70
T = 0.5

def u_initial(nx,nt,T):
    dx = 4./(nx-1)
    u = np.zeros(nx)
    u[0:2/dx+1] = 1
    dt = T/nt
    return [u,dx,dt]

[u,dx,dt] = u_initial(nx,nt,T)
plt.plot(np.linspace(0,4,nx),u); plt.ylim(-1,2);

computeF = lambda u: (u/2)**2
def maccormack(u, nt, dt, dx, eps):
    un = numpy.zeros((nt,len(u)))
    un[:] = u.copy()
    ustar = u.copy()
    
    for i in range(1,nt):
        F = computeF(u)
        
        ustar[1:-1] = u[1:-1]-dt/dx*(F[2:]-F[1:-1])+eps*(u[2:]-2.*u[1:-1]+u[:-2])
        
        Fstar = computeF(ustar)
        
        un[i,1:] = 0.5*(u[1:]+ustar[1:]-dt/dx*(Fstar[1:]-Fstar[:-1]))
        
        u = un[i].copy()
        
    return un

def animate(data):
    x = numpy.linspace(0,4,nx)
    y = data
    line.set_data(x,y)
    return line

sigma = 1
dt = sigma*dx
eps = 0.5

un = maccormack(u,nt,dt,dx,eps)

fig = plt.figure();
ax = plt.axes(xlim=(0,4),ylim=(-.5,2));
line, = ax.plot([],[],lw=2);

anim = animation.FuncAnimation(fig, animate, frames=un, interval=50)
display_animation(anim, default_mode='once')
